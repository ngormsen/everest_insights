),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
library(shiny)
library(shinymaterial)
library(DT)
library(fresh)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='border-bottom: 1px solid darkgray; height:160px;'>
<img style='max-height: 155px; float: left' src='https://www.creativefabrica.com/wp-content/uploads/2019/10/24/20-1-580x387.jpg'/>
</div>
"
dividerHTML <- "<hr style='border-top: 1px solid darkgray; padding: 10em 0 0 10em'>"
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset"),
DTOutput(outputId="plotTranslogRaw"),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
dividerHTML <- "
<div style='padding: 5em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
library(shiny)
library(shinymaterial)
library(DT)
library(fresh)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='border-bottom: 1px solid darkgray; height:160px;'>
<img style='max-height: 155px; float: left' src='https://www.creativefabrica.com/wp-content/uploads/2019/10/24/20-1-580x387.jpg'/>
</div>
"
dividerHTML <- "
<div style='padding: 5em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset"),
DTOutput(outputId="plotTranslogRaw"),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
library(shiny)
library(shinymaterial)
library(DT)
library(fresh)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='border-bottom: 1px solid darkgray; height:160px;'>
<img style='max-height: 155px; float: left' src='https://www.creativefabrica.com/wp-content/uploads/2019/10/24/20-1-580x387.jpg'/>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset"),
DTOutput(outputId="plotTranslogRaw"),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
library(shiny)
library(shinymaterial)
library(DT)
library(fresh)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='border-bottom: 1px solid darkgray; height:160px;'>
<img style='max-height: 155px; float: left' src='https://www.creativefabrica.com/wp-content/uploads/2019/10/24/20-1-580x387.jpg'/>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset"),
DTOutput(outputId="plotTranslogRaw"),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
HTML(dividerHTML),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
HTML(dividerHTML),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui_default.r")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()))
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()))
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()))
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
clvs <- reactive({
ComputeCLV(transLog = dt())
})
recencyFrequency <- reactive({
ComputeRecencyFrequency(dt())
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotCohortAgeLinechart <- renderPlot({
PlotCohortAgeLinechart(dt())
})
output$plotC3 <- renderPlot({
PlotC3(dt(), input$cohortType)
})
output$plotCLVScatterplot <- renderPlot({
PlotCLVDensity(clvs())
})
output$plotRecencyFrequency <- renderPlot({
PlotRecencyFrequency(recencyFrequency())
})
}
# shinyApp(ui=ui, server=server)
shinyApp(ui=ui, server=server)
runApp('server_default.R')
shinyApp(ui, server)
library(shiny)
library(shinymaterial)
library(DT)
library(fresh)
source("html_elements.R")
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fluidRow(
column(3,
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset")
),
column(9, DTOutput(outputId="plotTranslogRaw"))
),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
HTML(dividerHTML),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
HTML(dividerHTML),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
PlotTranslog <- function(translog) {
DT::datatable(
translog,
options = list(
pageLength = 10, # number of rows to display
searching = F,   # disable search field
paging = F      # disable "show x entries" button
)
) %>%
# Reduce font size of the table entries
DT::formatStyle(
columns = names(translog),
fontSize = '85%'
)
}
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui_default.r")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()))
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()))
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()))
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
clvs <- reactive({
ComputeCLV(transLog = dt())
})
recencyFrequency <- reactive({
ComputeRecencyFrequency(dt())
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
PlotTranslog(translogClean())
})
output$plotCohortData <- renderDT({
dt()
})
output$plotCohortAgeLinechart <- renderPlot({
PlotCohortAgeLinechart(dt())
})
output$plotC3 <- renderPlot({
PlotC3(dt(), input$cohortType)
})
output$plotCLVScatterplot <- renderPlot({
PlotCLVDensity(clvs())
})
output$plotRecencyFrequency <- renderPlot({
PlotRecencyFrequency(recencyFrequency())
})
}
# shinyApp(ui=ui, server=server)
shinyApp(ui, server)
PlotTranslog <- function(translog) {
DT::datatable(
translog,
options = list(
pageLength = 10, # number of rows to display
searching = F,   # disable search field
paging = F,      # disable "show x entries" button
scroller = T,
scrollY = 300
)
) %>%
# Reduce font size of the table entries
DT::formatStyle(
columns = names(translog),
fontSize = '85%'
)
}
shinyApp(ui, server)
economist_pal()
economist_pal()
economist_pal()[1]
economist_pal()(1)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: '#014d64';'>
</div>
"
shinyApp(ui, server)
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: '#014d64';'>
</div>
"
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
includeCSS("WWW/style.css"),
# Header ------------------------------------------------------------------
HTML(logoHTML),
# Dataset -----------------------------------------------------------------
h2("Load Transaction Log"),
fluidRow(
column(3,
fileInput("userInputFile", "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL, multiple = FALSE),
selectInput("amountSpentCol", "Amount Spent", choices = NULL, multiple = FALSE),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL, multiple = FALSE),
actionButton("startPreprocessing", "Preprocess Dataset")
),
column(9, DTOutput(outputId="plotTranslogRaw"))
),
HTML(dividerHTML),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
HTML(dividerHTML),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot"),
HTML(dividerHTML),
h2("Recency & Frequency Segmentation"),
plotOutput("plotRecencyFrequency")
))
shinyApp(ui, server)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: #014d64;'>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: '#014d64';'>
</div>
"
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: #014d64;'>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
shinyApp(ui, server)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: gray;'>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: '#014d64';'>
</div>
"
shinyApp(ui, server)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: 'gray';'>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
shinyApp(ui, server)
# html strings --------------------------------------------------------------
logoHTML <- "
<div style='width: 100%; height: 120px; background-color: black;'>
</div>
"
dividerHTML <- "
<div style='padding: 2em 0;'>
<hr style='border-top: 1px solid darkgray;'>
</div>
"
shinyApp(ui, server)
