dtPlt$period <- as.Date(quarters)
xBreaks <- sort(unique(dtPlt$period))
}
dtPlt <- dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
plt <- ggplot(dtPlt, aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack") +
geom_line(position = "stack", alpha=0.2) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
labs(fill = "Cohort") +
ylab("Number \n of \n Customers") +
xlab("Period")
if (cohortType == "Quarterly Cohorts"){
plt <- plt +
scale_x_date(breaks = xBreaks, labels = xLabels)
}
plt
# Plots -------------------------------------------------------------------
PlotC3 <- function(data, cohortType){
dtPlt <- data[, .N, by = .(cohort, orderPeriod)]
if (cohortType == "Monthly Cohorts"){
dtPlt[, period := as.Date(paste0(orderPeriod, "-01"))]
} else if (cohortType == "Yearly Cohorts"){
dtPlt[, period := orderPeriod]
} else if (cohortType == "Quarterly Cohorts"){
dtPlt[, period := orderPeriod]
}
# We need to add an additional row for each cohort with the dependent variable
# equal to zero, such that the chart doesn't have these weird-looking "steps"
# whenever a new cohort joins.
cohorts <- unique(dtPlt$cohort)
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- as.numeric(paste0(year-1, ".", 4))
} else {
periodBeforeAcquisition <- as.numeric(paste0(year, ".", qrtr-1))
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: string "yyyy"
periodBeforeAcquisition <- as.character(as.numeric(cohorts) - 1)
}
tempRows <- data.table(
cohort = cohorts,
period = periodBeforeAcquisition,
N = 0 # dependent variable
)
dtPlt <- rbind(dtPlt[, c("cohort", "period", "N")], tempRows)
if (cohortType == "Yearly Cohorts") {
dtPlt$period <- as.numeric(dtPlt$period)
}
if (cohortType == "Quarterly Cohorts") {
xLabels <- QuarterToPrettyString(sort(unique(dtPlt$period)))
quarters <- lapply(dtPlt$period, function(x) QuarterToTimestamp(x))
quarters <- purrr::flatten_chr(quarters)
dtPlt$period <- as.Date(quarters)
xBreaks <- sort(unique(dtPlt$period))
}
dtPlt <- dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
plt <- ggplot(dtPlt, aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack") +
geom_line(position = "stack", alpha=0.2) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
labs(fill = "Cohort") +
ylab("Number \n of \n Customers") +
xlab("Period")
if (cohortType == "Quarterly Cohorts"){
plt <- plt +
scale_x_date(breaks = xBreaks, labels = xLabels)
}
return(plt)
}
runApp()
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number of Customers")
}
runApp()
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number of Customers")
}
runApp()
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_discrete(breaks = dtPlt$period) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
runApp()
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_continuous(breaks = dtPlt$period) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
# Cohort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_continuous(breaks = dtPlt$period) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_continuous(breaks = sort(unique(dtPlt$period))) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
# Cohort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_discrete(breaks = sort(unique(dtPlt$period))) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
# Cohort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
dt <- CreateCohortCols(
data = translogClean,
cohortType = cohortType
)
# Cohort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_continuous(breaks = sort(unique(dtPlt$period))) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
dt <- CreateCohortCols(
data = translogClean,
cohortType = cohortType
)
# Cohort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort)))
xBreaks <- sort(unique(dtPlt$cohortAge))
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
geom_point(size = 2, alpha = 0.5) +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
scale_x_continuous(breaks = xBreaks) +
labs(color = "Cohort") +
xlab("Age") +
ylab("Number \n of \n Customers")
}
ort Chart -----------------------------------------------------------
PlotCohortAgeLinechart(dt)
runApp()
PlotCLVDensity <- function(dataCLV) {
ggplot(dataCLV, aes(x = clv)) +
geom_density(fill = economist_pal()(1),
color = "white",
alpha = 0.5) +
geom_rug() +
theme_economist_white(gray_bg = FALSE) +
ggtitle("Distribution of CLVs") +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
)
}
# Load and Clean a Transaction Log
translogRaw <- as.data.table(read.csv("data/retail_relay2.csv"))
translogClean <- PreprocessRawTransactionLog(
data = translogRaw,
columns = list("custId" = "customerId",
"amountSpent" = "amountSpent",
"orderTimestamp" = "orderTimestamp")
)
# Create cohort-based data from aclean Transaction Log
cohortType <- "Quarterly Cohorts"
dt <- CreateCohortCols(
data = translogClean,
cohortType = cohortType
)
clv <- ComputeCLV(dt)
PlotCLVDensity(clv)
PlotCLVDensity <- function(dataCLV) {
ggplot(dataCLV, aes(x = clv)) +
geom_density(fill = economist_pal()(1),
color = "white",
alpha = 0.5) +
geom_rug() +
theme_economist_white(gray_bg = FALSE) +
ggtitle("Distribution of CLVs") +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
xlab("CLV ($)") +
ylab("Density")
}
PlotCLVDensity <- function(dataCLV) {
ggplot(dataCLV, aes(x = clv)) +
geom_density(fill = economist_pal()(1),
color = "white",
alpha = 0.5) +
geom_rug() +
theme_economist_white(gray_bg = FALSE) +
ggtitle("Distribution of CLVs \n") +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
xlab("CLV ($)") +
ylab("Density")
}
PlotCLVDensity(clv)
PlotCLVDensity <- function(dataCLV) {
ggplot(dataCLV, aes(x = clv)) +
geom_density(fill = economist_pal()(1),
color = "white",
alpha = 0.5) +
geom_rug() +
theme_economist_white(gray_bg = FALSE) +
ggtitle("Distribution of CLVs \n") +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
xlab("CLV ($)") +
ylab("Density")
}
PlotRecencyFrequency <- function(data) {
ggplot(data, aes(x = recency, y = frequency)) +
geom_point() +
theme_classic() +
theme(
axis.text = element_text(color = "grey50", size = 12),
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5, face = "plain"),
axis.title = element_text(color = "grey30", size = 12, face = "bold"),
axis.title.y = element_text(angle = 0),
axis.line = element_line(color = "grey50"),
legend.position = "top",
legend.text = element_text(color = "grey50")
) +
xlab("Recency (last purchase date)") +
ylab("Frequency \n (avg. number of \n purchases)")
}
PlotRecencyFrequency(dt)
PlotRecencyFrequency(ComputeRecencyFrequency(dt))
PlotRecencyFrequency(ComputeRecencyFrequency(dt))
runApp()
runApp()
dt
dt[1 , custId]
dt[1 , 1]
dt[["custId"]]
dt
dt[1, 1]
paste(dt[1, 1])
paste(dt[1, 3])
dt
dt[, custId]
dt <- head(dt)
dt
dt[, custId]
dt[, "custId"]
dt[["custId"]]
dt[, c("custId", "amountSpent")]
dt[, c("custId", "amountSpent"), with = F]
dt[, get(c("custId", "amountSpent"))]
colname <- "custId"
dt[, colname]
dt[, get(colname)]
dt[, eval(colname)]
dt[, get(colname), with = F]
dt[, colname, with = F]
colname <- "custId"
dt[, get(colname)]
dt[, colname]
dt[, colname, with = F]
install.packages("installr")
library(installr)
updateR()
