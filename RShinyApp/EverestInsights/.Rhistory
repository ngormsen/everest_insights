if (cohortType == "Yearly Cohorts"){
dt[, cohortAge := orderYear - acqYear]
}
return(dt)
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme(
legend.position = "none"
)
}
runApp()
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(cohort)]
dt[, acqQuarter := lubridate::quarter(cohort)]
dt[, acqYear := lubridate::year(cohort)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := (acqYear - minAcqYear) * 12 + (acqMonth - minAcqMonth) + 1]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := (acqYear - minAcqYear) * 4 + (acqQuarter - minAcqQuarter) + 1]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := (acqYear - minAcqYear) + 1]
dt[, cohortAge := orderYear - acqYear]
}
return(dt)
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme(
legend.position = "none"
)
}
date <- "2020-01-30"
lubridate::format_ISO8601(date, precision = "ym")
date <- "2020-01-30"
lubridate::format_ISO8601(date, precision = "ym")
date <- "2020-01-30"
format(as.Date(date), "%Y-%m")
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(cohort)]
dt[, acqQuarter := lubridate::quarter(cohort)]
dt[, acqYear := lubridate::year(cohort)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "cohort", "cohortAge")])
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme(
legend.position = "none"
)
}
date <- "2020-01-30"
format(as.Date(date), "%Y-%m")
lubridate::format_ISO8601(date, precision = "ym")
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(cohort)]
dt[, acqQuarter := lubridate::quarter(cohort)]
dt[, acqYear := lubridate::year(cohort)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "cohort", "cohortAge")])
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme(
legend.position = "none"
)
}
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui.R")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()), selected = NULL)
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotC3 <- renderPlot({
PlotC3(dt())
})
}
# shinyApp(ui=ui, server=server)
runApp()
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(acqTimestamp)]
dt[, acqQuarter := lubridate::quarter(acqTimestamp)]
dt[, acqYear := lubridate::year(acqTimestamp)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "cohort", "cohortAge")])
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme(
legend.position = "none"
)
}
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui.R")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()), selected = NULL)
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotC3 <- renderPlot({
PlotC3(dt())
})
}
# shinyApp(ui=ui, server=server)
runApp()
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui.R")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()), selected = NULL)
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotC3 <- renderPlot({
PlotC3(dt())
})
}
# shinyApp(ui=ui, server=server)
runApp()
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(acqTimestamp)]
dt[, acqQuarter := lubridate::quarter(acqTimestamp)]
dt[, acqYear := lubridate::year(acqTimestamp)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "cohort", "cohortAge")])
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line()
# theme(legend.position = "none")
}
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui.R")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()), selected = NULL)
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotC3 <- renderPlot({
PlotC3(dt())
})
}
# shinyApp(ui=ui, server=server)
runApp()
runApp()
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(acqTimestamp)]
dt[, acqQuarter := lubridate::quarter(acqTimestamp)]
dt[, acqYear := lubridate::year(acqTimestamp)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "cohort", "cohortAge")])
}
PlotC3 <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
ggplot(dtPlt, aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme_bw()
# theme(legend.position = "none")
}
runApp()
