dtPlt[, period := orderPeriod]
}
dtPlt
# We need to add an additional row for each cohort with the dependent variable
# equal to zero, such that the chart doesn't have these weird-looking "steps"
# whenever a new cohort joins.
cohorts <- unique(dtPlt$cohort)
cohorts
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- paste0(year-1, ".", 4)
} else {
periodBeforeAcquisition <- paste0(year, ".", qrtr-1)
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: integer of year
periodBeforeAcquisition <- cohorts - 1
}
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- paste0(year-1, ".", 4)
} else {
periodBeforeAcquisition <- paste0(year, ".", qrtr-1)
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: string "yyyy"
periodBeforeAcquisition <- as.character(as.numeric(cohorts) - 1)
}
tempRows <- data.table(
cohort = cohorts,
period = periodBeforeAcquisition,
N = 0 # dependent variable
)
tempRows
dtPlt
dtPlt <- rbind(dtPlt[, c("cohort", "period", "N")], tempRows)
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
dtPlt
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
# geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
str(dtPlt)
dtPlt %>%
mutate(cohort = as.factor(cohort),
period = as.numeric(period)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
# Create cohort-based data from aclean Transaction Log
cohortType <- "Quarterly Cohorts"
dt <- CreateCohortCols(
data = translogClean,
cohortType = cohortType
)
# Plot C3Function ----------------------------------------------------------------
dtPlt <- dt[, .N, by = .(cohort, orderPeriod)]
if (cohortType == "Monthly Cohorts"){
dtPlt[, period := as.Date(paste0(orderPeriod, "-01"))]
} else if (cohortType == "Yearly Cohorts"){
dtPlt[, period := orderPeriod]
} else if (cohortType == "Quarterly Cohorts"){
dtPlt[, period := orderPeriod]
}
dtPlt
str(dtPlt)
# We need to add an additional row for each cohort with the dependent variable
# equal to zero, such that the chart doesn't have these weird-looking "steps"
# whenever a new cohort joins.
cohorts <- unique(dtPlt$cohort)
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- as.numeric(paste0(year-1, ".", 4))
} else {
periodBeforeAcquisition <- as.numeric(paste0(year, ".", qrtr-1))
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: string "yyyy"
periodBeforeAcquisition <- as.character(as.numeric(cohorts) - 1)
}
tempRows <- data.table(
cohort = cohorts,
period = periodBeforeAcquisition,
N = 0 # dependent variable
)
str(tempRows)
tempRows
dtPlt <- rbind(dtPlt[, c("cohort", "period", "N")], tempRows)
dtPlt
if (cohortType == "Yearly Cohorts") {
dtPlt$period <- as.numeric(dtPlt$period)
}
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- as.factor(dtPlt$period)
}
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- as.factor(dtPlt$period)
}
QuarterToTimestamp <- function(qrtr){
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) monthDay <- "01-01" # 1.Jan - 31. M채rz
if (qrtr == 2) monthDay <- "04-01" # 1.April - 30.Juni
if (qrtr == 3) monthDay <- "07-01" # 1. Juli - 30. Sept
if (qrtr == 4) monthDay <- "10-01" # 1. Okt - 31.Dez
return(paste0(year, "-", monthDay))
}
quarter
qrtr
QuarterToTimestamp <- function(yearDotQuarter){
year <- as.numeric(str_extract(yearDotQuarter, "[0-9]+"))
qrtr <- as.numeric(str_sub(yearDotQuarter, -1, -1))
if (qrtr == 1) monthDay <- "01-01" # 1.Jan - 31. M채rz
if (qrtr == 2) monthDay <- "04-01" # 1.April - 30.Juni
if (qrtr == 3) monthDay <- "07-01" # 1. Juli - 30. Sept
if (qrtr == 4) monthDay <- "10-01" # 1. Okt - 31.Dez
return(paste0(year, "-", monthDay))
}
QuarterToTimestamp(2020.1)
QuarterToTimestamp(2020.4)
QuarterToTimestamp(c(2020.4, 2020.1))
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- sapply(dtPlt$period, function(x) QuarterToTimestamp(x))
}
dtPlt
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
QuarterToTimestamp <- function(yearDotQuarter){
year <- as.numeric(str_extract(yearDotQuarter, "[0-9]+"))
qrtr <- as.numeric(str_sub(yearDotQuarter, -1, -1))
if (qrtr == 1) monthDay <- "01-01" # 1.Jan - 31. M채rz
if (qrtr == 2) monthDay <- "04-01" # 1.April - 30.Juni
if (qrtr == 3) monthDay <- "07-01" # 1. Juli - 30. Sept
if (qrtr == 4) monthDay <- "10-01" # 1. Okt - 31.Dez
return(as.Datepaste0(year, "-", monthDay)))
}
QuarterToTimestamp <- function(yearDotQuarter){
year <- as.numeric(str_extract(yearDotQuarter, "[0-9]+"))
qrtr <- as.numeric(str_sub(yearDotQuarter, -1, -1))
if (qrtr == 1) monthDay <- "01-01" # 1.Jan - 31. M채rz
if (qrtr == 2) monthDay <- "04-01" # 1.April - 30.Juni
if (qrtr == 3) monthDay <- "07-01" # 1. Juli - 30. Sept
if (qrtr == 4) monthDay <- "10-01" # 1. Okt - 31.Dez
return(as.Date(paste0(year, "-", monthDay)))
}
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- sapply(dtPlt$period, function(x) QuarterToTimestamp(x))
}
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
dtPlt
# Create cohort-based data from aclean Transaction Log
cohortType <- "Quarterly Cohorts"
dt <- CreateCohortCols(
data = translogClean,
cohortType = cohortType
)
# Plot C3Function ----------------------------------------------------------------
dtPlt <- dt[, .N, by = .(cohort, orderPeriod)]
if (cohortType == "Monthly Cohorts"){
dtPlt[, period := as.Date(paste0(orderPeriod, "-01"))]
} else if (cohortType == "Yearly Cohorts"){
dtPlt[, period := orderPeriod]
} else if (cohortType == "Quarterly Cohorts"){
dtPlt[, period := orderPeriod]
}
# We need to add an additional row for each cohort with the dependent variable
# equal to zero, such that the chart doesn't have these weird-looking "steps"
# whenever a new cohort joins.
cohorts <- unique(dtPlt$cohort)
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- as.numeric(paste0(year-1, ".", 4))
} else {
periodBeforeAcquisition <- as.numeric(paste0(year, ".", qrtr-1))
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: string "yyyy"
periodBeforeAcquisition <- as.character(as.numeric(cohorts) - 1)
}
tempRows <- data.table(
cohort = cohorts,
period = periodBeforeAcquisition,
N = 0 # dependent variable
)
dtPlt <- rbind(dtPlt[, c("cohort", "period", "N")], tempRows)
if (cohortType == "Yearly Cohorts") {
dtPlt$period <- as.numeric(dtPlt$period)
}
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- sapply(dtPlt$period, function(x) QuarterToTimestamp(x))
}
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
PreprocessRawTransactionLog <- function(data, columns){
# only select relevant columns
dtOut <- data[, c(columns[["custId"]],
columns[["amountSpent"]],
columns[["orderTimestamp"]]), with=F]
# rename columns
setnames(dtOut, new = names(columns))
# Fix datatypes
dtOut[, orderTimestamp := as.Date(orderTimestamp)]
return(dtOut)
}
CreateCohortCols <- function(data, cohortType){
dt <- copy(data)
dt[, acqTimestamp := min(orderTimestamp), by = .(custId)]
dt[, acqMonth := lubridate::month(acqTimestamp)]
dt[, acqQuarter := lubridate::quarter(acqTimestamp)]
dt[, acqYear := lubridate::year(acqTimestamp)]
minAcqMonth <- min(dt$acqMonth)
minAcqQuarter <- min(dt$acqQuarter)
minAcqYear <- min(dt$acqYear)
dt[, orderMonth := lubridate::month(orderTimestamp)]
dt[, orderQuarter := lubridate::quarter(orderTimestamp)]
dt[, orderYear := lubridate::year(orderTimestamp)]
dt[, orderYearMonth := format(orderTimestamp, "%Y-%m")]
if (cohortType == "Monthly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y-%m")]
dt[, cohortAge := (orderYear - acqYear) * 12 + (orderMonth - acqMonth)]
dt[, orderPeriod := format(orderTimestamp, "%Y-%m")]
}
if (cohortType == "Quarterly Cohorts"){
dt[, cohort := lubridate::quarter(acqTimestamp, with_year = T)]
dt[, cohortAge := (orderYear - acqYear) * 4 + (orderQuarter - acqQuarter)]
dt[, orderPeriod := lubridate::quarter(orderTimestamp, with_year = T)]
}
if (cohortType == "Yearly Cohorts"){
dt[, cohort := format(acqTimestamp, "%Y")]
dt[, cohortAge := orderYear - acqYear]
dt[, orderPeriod := lubridate::year(orderTimestamp)]
}
return(dt[, c("custId", "amountSpent", "orderTimestamp", "orderPeriod", "cohort", "cohortAge")])
}
PlotC3 <- function(data, cohortType){
# Note: works only for monthly periods!!
dtPlt <- data[, .N, by = .(cohort, orderPeriod)]
if (cohortType == "Monthly Cohorts"){
dtPlt[, period := as.Date(paste0(orderPeriod, "-01"))]
} else if (cohortType == "Yearly Cohorts"){
dtPlt[, period := orderPeriod]
} else if (cohortType == "Quarterly Cohorts"){
dtPlt[, period := orderPeriod]
}
# We need to add an additional row for each cohort with the dependent variable
# equal to zero, such that the chart doesn't have these weird-looking "steps"
# whenever a new cohort joins.
cohorts <- unique(dtPlt$cohort)
# Compute period before acquisition
if (cohortType == "Monthly Cohorts"){
# Monthly Cohorts: string "yyyy-mm"
cohortsTemp <- as.Date(paste0(cohorts, "-01"))
periodBeforeAcquisition <- cohortsTemp %m-% months(1)
} else if (cohortType == "Quarterly Cohorts"){
# Quarterly Cohorts: string "yyyy.q"
periodBeforeAcquisition <- sapply(cohorts, function(cohort) {
year <- as.numeric(str_extract(cohort, "[0-9]+"))
qrtr <- as.numeric(str_sub(cohort, -1, -1))
if (qrtr == 1) {
periodBeforeAcquisition <- as.numeric(paste0(year-1, ".", 4))
} else {
periodBeforeAcquisition <- as.numeric(paste0(year, ".", qrtr-1))
}
return(periodBeforeAcquisition)
})
} else if (cohortType == "Yearly Cohorts"){
# Yearly Cohorts: string "yyyy"
periodBeforeAcquisition <- as.character(as.numeric(cohorts) - 1)
}
tempRows <- data.table(
cohort = cohorts,
period = periodBeforeAcquisition,
N = 0 # dependent variable
)
dtPlt <- rbind(dtPlt[, c("cohort", "period", "N")], tempRows)
if (cohortType == "Yearly Cohorts") {
dtPlt$period <- as.numeric(dtPlt$period)
}
if (cohortType == "Quarterly Cohorts") {
dtPlt$period <- sapply(dtPlt$period, function(x) QuarterToTimestamp(x))
}
dtPlt %>%
mutate(cohort = as.factor(cohort)) %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = period, y = N, fill = cohort)) +
geom_area(position = "stack", alpha = 0.8) +
geom_line(position = "stack", alpha=0.5) +
theme_bw() +
ylab("Number of Customers") +
xlab("Period")
}
PlotCohortAgeLinechart <- function(data){
dtPlt <- data[, .N, by = .(cohort, cohortAge)]
dtPlt[, cohort := as.character(cohort)]
#        cohort cohortAge N
# 1: 2009-01-11         0 2
# 2: 2009-01-11         1 5
dtPlt %>%
mutate(cohort = fct_reorder(cohort, desc(cohort))) %>%
ggplot(aes(x = cohortAge, y = N, color = cohort)) +
geom_line() +
theme_bw()
}
QuarterToTimestamp <- function(yearDotQuarter){
year <- as.numeric(str_extract(yearDotQuarter, "[0-9]+"))
qrtr <- as.numeric(str_sub(yearDotQuarter, -1, -1))
if (qrtr == 1) monthDay <- "01-01" # 1.Jan - 31. M채rz
if (qrtr == 2) monthDay <- "04-01" # 1.April - 30.Juni
if (qrtr == 3) monthDay <- "07-01" # 1. Juli - 30. Sept
if (qrtr == 4) monthDay <- "10-01" # 1. Okt - 31.Dez
return(as.Date(paste0(year, "-", monthDay)))
}
runApp()
runApp()
library(shiny)
library(shiny)
library(data.table)
library(tidyverse)
library(DT)
library(lubridate)
source("ui.R")
source("utils.R")
server <- function(input, output, session) {
# Calculations ------------------------------------------------------------
translogRaw <- reactive({
file <- input$userInputFile
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dt <- as.data.table(read.csv(file=file$datapath))
dt
})
# Update inputs for choosing customerId-, orderId, and timestamp-column
observe({
updateSelectInput(session, inputId = "custIdCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "amountSpentCol", choices = names(translogRaw()), selected = NULL)
updateSelectInput(session, inputId = "orderTimestampCol", choices = names(translogRaw()), selected = NULL)
})
# Once the user clicks on "Start Preprocessing"-Button, start preprocessing
translogClean <- eventReactive(input$startPreprocessing, {
PreprocessRawTransactionLog(
data = translogRaw(),
columns = list("custId" = input$custIdCol,
"amountSpent" = input$amountSpentCol,
"orderTimestamp" = input$orderTimestampCol)
)
})
dt <- reactive({
CreateCohortCols(data = translogClean(), cohortType = input$cohortType)
})
clvs <- reactive({
ComputeCLV(transLog = dt())
})
# Outputs ---------------------------------------------------------
output$plotTranslogRaw <- renderDT({
translogClean()
})
output$plotCohortData <- renderDT({
dt()
})
output$plotCohortAgeLinechart <- renderPlot({
PlotCohortAgeLinechart(dt())
})
output$plotC3 <- renderPlot({
PlotC3(dt(), input$cohortType)
})
output$plotCLVScatterplot <- renderPlot({
PlotCLVDensity(clvs())
})
}
# shinyApp(ui=ui, server=server)
runApp()
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(theme = "bootstrap.min.css",
# Header ------------------------------------------------------------------
titlePanel("Everest Insights"),
# Dataset -----------------------------------------------------------------
fileInput(inputId = "userInputFile", label = "Transaction Log", accept = ".csv"),
selectInput("custIdCol", "Customer ID", choices = NULL),
selectInput("amountSpentCol", "Amount Spent", choices = NULL),
selectInput("orderTimestampCol", "Timestamp of Order", choices = NULL),
actionButton("startPreprocessing", "Preprocess Dataset"),
DTOutput(outputId="plotTranslogRaw"),
h2("Cohort Analysis"),
selectInput(
inputId = "cohortType",
label = NULL,
choices = c("Monthly Cohorts", "Quarterly Cohorts", "Yearly Cohorts"),
selected = "Monthly Cohorts"
),
fluidRow(
column(6, plotOutput("plotCohortAgeLinechart")),
column(6, plotOutput("plotC3"))
),
h2("CLV Analysis"),
plotOutput("plotCLVScatterplot")
))
runApp()
runApp()
runApp()
runApp()
